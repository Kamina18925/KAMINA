import React, { useState } from 'react';
import Modal from './Modal';
import Notification from './Notification';

// Formulario de registro
const RegistrationForm = ({ onRegistered }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [notification, setNotification] = useState(null);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name.trim() || !email.trim() || !phone.trim() || !password.trim() || !confirmPassword.trim()) {
      setError('Todos los campos son requeridos.');
      return;
    }
    if (password !== confirmPassword) {
      setError('Las contraseñas no coinciden.');
      return;
    }
    const phoneRegex = /^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$/;
    if (!phoneRegex.test(phone)) {
      setError('Formato de teléfono inválido. Use 809-XXX-XXXX o similar.');
      return;
    }
    
    setLoading(true);
    
    try {
      setNotification({ message: 'Registrando usuario...', type: 'info' });
      
      // Usar la API para registrar al usuario
      const response = await fetch('http://localhost:3001/api/users/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          nombre: name,
          email: email,
          telefono: phone,
          password: password,
          rol: 'client'
        }),
      });
      
      const data = await response.json();
      
      if (response.ok && data.success) {
        setNotification({ message: 'Usuario registrado exitosamente.', type: 'success' });
        onRegistered();
      } else {
        setError(data.message || 'Error al registrar usuario.');
      }
    } catch (error) {
      console.error('Error en registro:', error);
      setError('Error de conexión. Verifica que el servidor esté funcionando.');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {notification && (
        <div className={`p-3 rounded-md ${notification.type === 'success' ? 'bg-green-100 text-green-700' : notification.type === 'error' ? 'bg-red-100 text-red-700' : 'bg-blue-100 text-blue-700'}`}>
          {notification.message}
        </div>
      )}
      {error && (
        <div className="p-3 rounded-md bg-red-100 text-red-700">
          {error}
        </div>
      )}
      <div>
        <label htmlFor="reg_name" className="block text-sm font-medium text-slate-700">Nombre Completo</label>
        <input id="reg_name" name="name" type="text" required value={name} onChange={e => setName(e.target.value)} className="mt-1 block w-full p-2.5 border border-slate-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Tu Nombre Completo" />
      </div>
      <div>
        <label htmlFor="reg_email" className="block text-sm font-medium text-slate-700">Email</label>
        <input id="reg_email" name="email" type="email" autoComplete="email" required value={email} onChange={e => setEmail(e.target.value)} className="mt-1 block w-full p-2.5 border border-slate-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="tu@email.com" />
      </div>
      <div>
        <label htmlFor="reg_phone" className="block text-sm font-medium text-slate-700">Teléfono</label>
        <input id="reg_phone" name="phone" type="tel" autoComplete="tel" required value={phone} onChange={e => setPhone(e.target.value)} className="mt-1 block w-full p-2.5 border border-slate-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="809-123-4567" />
      </div>
      <div>
        <label htmlFor="reg_password" className="block text-sm font-medium text-slate-700">Contraseña</label>
        <input id="reg_password" name="password" type="password" required value={password} onChange={e => setPassword(e.target.value)} className="mt-1 block w-full p-2.5 border border-slate-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="••••••••" />
      </div>
      <div>
        <label htmlFor="reg_confirm_password" className="block text-sm font-medium text-slate-700">Confirmar Contraseña</label>
        <input id="reg_confirm_password" name="confirmPassword" type="password" required value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} className="mt-1 block w-full p-2.5 border border-slate-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="••••••••" />
      </div>
      <div className="pt-2">
        <button type="submit" disabled={loading} className="w-full flex justify-center py-2.5 px-4 border border-transparent rounded-md shadow-sm text-sm font-semibold text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-60 transition-colors">
          {loading ? 'Registrando...' : 'Registrarse'}
        </button>
      </div>
    </form>
  );
};

// Formulario de recuperación de contraseña
const ForgotPasswordForm = ({ onSent }) => {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [notification, setNotification] = useState(null);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!email.trim()) {
      setError('El email es requerido.');
      return;
    }
    
    setLoading(true);
    
    try {
      setNotification({ message: 'Enviando solicitud...', type: 'info' });
      
      // Implementar llamada a API para solicitar recuperación de contraseña
      const response = await fetch('http://localhost:3001/api/users/forgot-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });
      
      const data = await response.json();
      
      if (response.ok && data.success) {
        setNotification({ message: 'Instrucciones enviadas a tu email.', type: 'success' });
        setTimeout(onSent, 2000);
      } else {
        setError(data.message || 'Error al procesar solicitud.');
      }
    } catch (error) {
      console.error('Error al solicitar recuperación:', error);
      setError('Error de conexión. Verifica que el servidor esté funcionando.');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {notification && (
        <div className={`p-3 rounded-md ${notification.type === 'success' ? 'bg-green-100 text-green-700' : notification.type === 'error' ? 'bg-red-100 text-red-700' : 'bg-blue-100 text-blue-700'}`}>
          {notification.message}
        </div>
      )}
      {error && (
        <div className="p-3 rounded-md bg-red-100 text-red-700">
          {error}
        </div>
      )}
      <div>
        <label htmlFor="forgot_email" className="block text-sm font-medium text-slate-700">Email</label>
        <input id="forgot_email" name="email" type="email" autoComplete="email" required value={email} onChange={e => setEmail(e.target.value)} className="mt-1 block w-full p-2.5 border border-slate-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="tu@email.com" />
      </div>
      <div className="pt-2">
        <button type="submit" disabled={loading} className="w-full flex justify-center py-2.5 px-4 border border-transparent rounded-md shadow-sm text-sm font-semibold text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-60 transition-colors">
          {loading ? 'Enviando...' : 'Enviar Instrucciones'}
        </button>
      </div>
    </form>
  );
};

const LoginPage = ({ onLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showRegistration, setShowRegistration] = useState(false);
  const [showForgotPassword, setShowForgotPassword] = useState(false);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await fetch('http://localhost:3001/api/users/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        // Llamar a onLogin con los datos del usuario Y el token de sesión
        onLogin(data.user, data.sessionToken); // ← Pasar ambos parámetros
        
        // Opcional: mostrar mensaje de éxito
        console.log('Login exitoso:', data.user.name);
      } else {
        setError(data.message || 'Error al iniciar sesión');
      }
    } catch (error) {
      console.error('Error de conexión:', error);
      setError('Error de conexión. Verifica que el servidor esté funcionando.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center login-page-bg p-4 sm:p-6 lg:p-8">
      <div className="w-full max-w-sm">
        <div className="text-center mb-10">
          <h1 className="text-5xl font-extrabold text-slate-800 tracking-tight">Barber<span className="text-indigo-600">RD</span></h1>
        </div>
        <div className="bg-white py-8 px-6 shadow-2xl rounded-xl sm:px-10">
          {error && (
            <div className="mb-4 p-3 rounded-md bg-red-100 text-red-700">
              {error}
            </div>
          )}
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email_login" className="sr-only">Email</label>
              <input id="email_login" name="email" type="email" autoComplete="email" required value={email} onChange={e => setEmail(e.target.value)} className="appearance-none block w-full pl-3 pr-3 py-2.5 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="tu@email.com" />
            </div>
            <div>
              <label htmlFor="password_login" className="sr-only">Contraseña</label>
              <input id="password_login" name="password" type="password" autoComplete="current-password" required value={password} onChange={e => setPassword(e.target.value)} className="appearance-none block w-full pl-3 pr-3 py-2.5 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="••••••••" />
            </div>
            <div className="pt-2"></div>
            <div>
              <button type="submit" disabled={loading} className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-semibold text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-60 transition-colors">
                {loading ? 'Iniciando sesión...' : 'Iniciar Sesión'}
              </button>
            </div>
          </form>
          <div className="mt-6 text-sm text-center space-x-2">
            <a href="#" onClick={e => { e.preventDefault(); setShowForgotPassword(true); }} className="font-medium text-indigo-600 hover:text-indigo-500 hover:underline">¿Olvidaste tu contraseña?</a>
            <span className="text-slate-300">|</span>
            <a href="#" onClick={e => { e.preventDefault(); setShowRegistration(true); }} className="font-medium text-indigo-600 hover:text-indigo-500 hover:underline">Crear cuenta</a>
          </div>
        </div>
        <p className="mt-10 text-center text-xs text-slate-500">&copy; {new Date().getFullYear()} BarberRD. Todos los derechos reservados.</p>
      </div>
      {/* Modal de registro */}
      {showRegistration && (
        <Modal title="Crear Nueva Cuenta" isOpen={showRegistration} onClose={() => setShowRegistration(false)}>
          <RegistrationForm onRegistered={() => setShowRegistration(false)} />
        </Modal>
      )}
      {/* Modal de recuperación de contraseña */}
      {showForgotPassword && (
        <Modal title="Recuperar Contraseña" isOpen={showForgotPassword} onClose={() => setShowForgotPassword(false)}>
          <ForgotPasswordForm onSent={() => setShowForgotPassword(false)} />
        </Modal>
      )}

    </div>
  );
};

export default LoginPage;
